import {
  createSlice,
  createEntityAdapter,
  createAsyncThunk,
  createSelector,
} from "@reduxjs/toolkit";
import Alert from "rsuite/lib/Alert";

// ** Thunks for Async operations, API calls
export const fetchData = createAsyncThunk(
  "users/fetchData",
  async (_, { dispatch, getState }) => {
    try {
      const res = await fetch("http://localhost:3001/users");
      const data = await res.json();

      const users = data.map(({ id, name, email, articles, comments }) => ({
        id,
        name,
        email,
        articles: articles.map(({ id }) => id),
        comments: comments.map(({ id }) => id),
      }));

      // const articles = data
      //   .map((user) =>
      //     user.articles.map((article) => ({
      //       ...article,
      //       userId: user.id,
      //     }))
      //   )
      //   .flat();

      // ** refactored with reduce
      const articles = data.reduce((acc, curr) => {
        const userArticles = curr.articles.map((article) => ({
          ...article,
          userId: curr.id,
        }));
        acc = acc.concat(userArticles);
        return acc;
      }, []);

      const comments = data
        .map((user) =>
          user.comments.map((comment) => ({
            ...comment,
            userId: user.id,
          }))
        )
        .flat();

      dispatch(setUsers(users));
      dispatch(setArticles(articles));
      dispatch(setComments(comments));
    } catch (error) {
      console.error(`ERROR: ${error}`);
      throw new Error();
    }
  }
);

// ** Adapter setup for flat store structure
const usersAdapter = createEntityAdapter({
  selectId: (user) => user.id,
  sortComparer: (a, b) => a.name.localeCompare(b.name),
});

const articlesAdapter = createEntityAdapter({
  selectId: (article) => article.id,
});

const commentsAdapter = createEntityAdapter({
  selectId: ({ id }) => id,
});

// ** Contained reducers in createEntityAdapter:
// usersAdapter.addOne
// usersAdapter.addMany
// usersAdapter.setAll
// usersAdapter.removeOne
// usersAdapter.removeMany
// usersAdapter.removeAll
// usersAdapter.updateOne
// usersAdapter.updateMany
// usersAdapter.upsertOne
// usersAdapter.upsertMany

// ** Store Slice configuration
const usersSlice = createSlice({
  name: "users",
  initialState: usersAdapter.getInitialState({
    status: null, // 'loading', 'success', 'failed'
    comments: commentsAdapter.getInitialState(),
    articles: articlesAdapter.getInitialState(),
  }),
  reducers: {
    // Normalized Users - methos generated by createEntityAdapter
    addUser: usersAdapter.addOne,
    setUsers: usersAdapter.setAll,
    addUsers: usersAdapter.addMany,
    updateUser: usersAdapter.updateOne,
    updateUsers: usersAdapter.updateMany,
    upsertUser: usersAdapter.upsertOne,
    upsertUsers: usersAdapter.upsertMany,
    removeUser: usersAdapter.removeOne,
    removeUsers: usersAdapter.removeMany,
    removeAllUsers: usersAdapter.removeAll,
    // Normalized Articles
    setComments(state, { payload }) {
      commentsAdapter.setAll(state.comments, payload);
    },
    setArticles(state, { payload }) {
      articlesAdapter.setAll(state.articles, payload);
    },
  },
  extraReducers: {
    [fetchData.pending]: (state, action) => {
      Alert.info("Loading Data");
      return {
        ...state,
        status: "loading",
      };
    },
    [fetchData.rejected]: (state, action) => {
      Alert.error("Error Loading Data");
      return {
        ...state,
        status: "failed",
      };
    },
    [fetchData.fulfilled]: (state, { payload }) => {
      Alert.success("Loaded Data");
      // TODO - format data...
      return {
        ...state,
        status: "success",
      };
    },
  },
});

// ** Actions auto created, export for component use
export const {
  addUser,
  setUsers,
  addUsers,
  setArticles,
  setComments,
} = usersSlice.actions;

// ** Selectors
// ** Vanilla Selectors  */
export const selectUsersStatus = (store) => store.users.status;

// ** Entity Adapter Selectors */

const usersSelectors = usersAdapter.getSelectors((state) => state.users);
export const selectAllUsers = usersSelectors.selectAll;
export const selectAllEntities = usersSelectors.selectEntities;
export const selectAllUserIds = usersSelectors.selectIds;
export const selectUserTotal = usersSelectors.selectTotal;

const { selectById } = usersAdapter.getSelectors(); // Do not pass in state, as selectById requires id pass
export const selectUserById = (id) => {
  return createSelector(
    (state) => state.users,
    (state) => selectById(state, id)
  );
};

// ** Alternate Syntax for Selectors **/
// const usersSelectors = usersAdapter.getSelectors((state) => state.users);
// export const selectAllUsers = usersSelectors.selectAll;
const articleSelectors = articlesAdapter.getSelectors(
  (state) => state.users.articles
);
const commentsSelectors = commentsAdapter.getSelectors(
  (state) => state.users.comments
);
export const selectAllArticles = articleSelectors.selectAll;
export const selectAllComments = commentsSelectors.selectAll;

export default usersSlice.reducer;
